<?xml version="1.0" encoding="UTF-8"?>

<!--  A JASA implementation of the model described in the following paper:

		Iori, G., Chiarella, C., November 2002.
		A Simulation Analysis of the Microstructure of Double Auction Markets.
		Quantitative Finance 2, 346-353.
		http://ssrn.com/abstract=841608
 -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--  This is the top-level bean defining the experiment to be run -->
    <bean id="marketSimulation" class="net.sourceforge.jasa.market.MarketSimulation"
          scope="simulation">
        <property name="simulationController" ref="simulationController"/>
        <property name="maximumDays" value="1"/>
        <property name="lengthOfDay" value="200000"/>
        <property name="population" ref="evolvingPopulation"/>
        <property name="agentMixer" ref="randomArrivalAgentMixer"/>
        <property name="agentInitialiser" ref="agentInitialiserProxy"/>
        <property name="auctioneer" ref="cda"/>
        <property name="initialPrice" value="100"/>
    </bean>

    <!-- A continuous double auction (CDA) will be used to model the exchange -->
    <bean id="cda" scope="simulation"
          class="net.sourceforge.jasa.market.auctioneer.ContinuousDoubleAuctioneer">
        <property name="pricingPolicy" ref="timePriorityPricing"/>
    </bean>

    <!-- Transaction prices are set to the price of the earliest order to arrive -->
    <bean id="timePriorityPricing" scope="simulation"
          class="net.sourceforge.jasa.market.rules.TimePriorityPricingPolicy">
    </bean>

    <!-- Agents will arrive at the market with the specified probability -->
    <bean id="randomArrivalAgentMixer" scope="simulation"
          class="net.sourceforge.jabm.mixing.RandomArrivalAgentMixer">
        <constructor-arg ref="prng"/>
        <!--  In this model the probability of an agent arriving represents the
                total liquidity of the market  -->
        <property name="arrivalProbability" value="0.5"/>
    </bean>

    <bean id="agentInitialiserProxy" scope="simulation"
          class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="targetSource">
            <bean class="org.springframework.aop.target.LazyInitTargetSource">
                <property name="targetBeanName">
                    <idref bean="agentInitialiser" />
                </property>
            </bean>
        </property>
    </bean>

    <bean id="agentInitialiser" scope="simulation"
          class="net.sourceforge.jasa.agent.MarketAgentInitialiser">
        <property name="market" ref="marketSimulation"/>
    </bean>


    <bean id="prng" class="cern.jet.random.engine.MersenneTwister64">
        <constructor-arg>
            <bean class="java.util.Date"/>
        </constructor-arg>
    </bean>

    <bean id="staticPopulation" class="net.sourceforge.jabm.Population"
          scope="simulation" >
        <!-- 	<property name="agentFactory" ref="linearCombinationTraderFactory"/> -->
        <property name="agentList" ref="linearCombinationTraders"/>
    </bean>

    <!--  The population consists of 200 agents using linear-combination
            forecasting rules -->
    <bean id="linearCombinationTraders"
          scope="simulation" class="net.sourceforge.jabm.agent.AgentList"
          init-method="populateFromFactory">
        <property name="size" value="200"/>
        <property name="agentFactory" ref="linearCombinationTraderFactory"/>
    </bean>

    <bean id="linearCombinationTraderFactory" scope="simulation"
          class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
        <property name="targetBeanName">
            <idref bean="linearCombinationTraderPrototype"/>
        </property>
    </bean>

    <bean id="noiseTraderFactory" scope="simulation"
          class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
        <property name="targetBeanName">
            <idref bean="noiseTraderPrototype" />
        </property>
    </bean>

    <bean id="fundamentalistFactory" scope="simulation"
          class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
        <property name="targetBeanName">
            <idref bean="fundamentalistPrototype" />
        </property>
    </bean>

    <bean id="chartistFactory" scope="simulation"
          class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
        <property name="targetBeanName">
            <idref bean="chartistPrototype" />
        </property>
    </bean>

    <bean id="linearCombinationTraderPrototype" scope="prototype"
          class="net.sourceforge.jasa.agent.SimpleTradingAgent">
        <property name="strategy" ref="returnForecastStrategy"/>
        <property name="valuationPolicy" ref="linearCombinationValuationPolicy"/>
    </bean>

    <bean id="noiseTraderPrototype" scope="prototype"
          class="net.sourceforge.jasa.agent.SimpleTradingAgent">
        <property name="strategy" ref="returnForecastStrategy"/>
        <property name="valuationPolicy" ref="noiseTraderValuationPolicy"/>
    </bean>

    <bean id="fundamentalistPrototype" scope="prototype"
          class="net.sourceforge.jasa.agent.SimpleTradingAgent">
        <property name="strategy" ref="returnForecastStrategy"/>
        <property name="valuationPolicy" ref="fundamentalistValuationPolicy"/>
    </bean>

    <bean id="chartistPrototype" scope="prototype"
          class="net.sourceforge.jasa.agent.SimpleTradingAgent">
        <property name="strategy" ref="returnForecastStrategy"/>
        <property name="valuationPolicy" ref="chartistValuationPolicy"/>
    </bean>

    <bean id="strategy" scope="prototype"
          class="net.sourceforge.jabm.strategy.AbstractStrategy">
        <property name="scheduler" ref="simulationController"/>
    </bean>

    <bean id="returnForecastStrategy" scope="prototype" parent="strategy"
          class="net.sourceforge.jasa.agent.strategy.SimpleMarkupStrategy">
        <property name="markupDistribution" ref="markupDistribution"/>
        <property name="prng" ref="prng"/>
        <property name="tradeDirectionPolicy">
            <bean class="net.sourceforge.jasa.agent.strategy.ForecastTradeDirectionPolicy">
                <property name="prng" ref="prng"/>
            </bean>
        </property>
    </bean>

    <bean id="markupDistribution" scope="singleton"
          class="net.sourceforge.jabm.distribution.UniformDistribution">
        <property name="min" value="0.0"/>
        <property name="max" value="0.5"/>
        <property name="prng" ref="prng"/>
    </bean>

    <bean id="timeHorizonForecaster" scope="simulation"
          class="net.sourceforge.jasa.agent.valuation.ReturnForecasterWithTimeHorizon">
        <property name="timeHorizon" value="200"/>
    </bean>

    <bean id="noiseTraderForecaster" parent="timeHorizonForecaster"
          scope="simulation"
          class="net.sourceforge.jasa.agent.valuation.NoiseTraderForecaster">
        <property name="prng" ref="prng"/>
    </bean>

    <bean id="chartistForecaster" parent="timeHorizonForecaster" scope="prototype"
          class="net.sourceforge.jasa.agent.valuation.ChartistForecaster">
        <property name="windowSizeDistribution" ref="chartistWindowSizeDistribution"/>
        <!--  <property name="sampleInterval" value="1"/>   -->
    </bean>

    <bean id="fundamentalistForecaster" parent="timeHorizonForecaster"
          scope="simulation"
          class="net.sourceforge.jasa.agent.valuation.FundamentalistForecaster">
        <property name="fundamentalPrice" ref="constantFundamentalPrice" />
    </bean>

    <bean id="constantFundamentalPrice"
          class="net.sourceforge.jabm.util.MutableDoubleWrapper">
        <property name="value" value="500.0"/>
    </bean>

    <bean id="gbmFundamentalPrice" scope="singleton"
          class="net.sourceforge.jabm.util.MutableDoubleWrapper">
        <property name="value" value="500.0"/>
    </bean>

    <bean id="gbmPriceProcess"  scope="simulation"
          class="net.sourceforge.jasa.agent.valuation.GeometricBrownianMotionPriceProcess">
        <property name="priceWrapper" ref="gbmFundamentalPrice"/>
        <property name="drift" value="0.2"/>
        <property name="volatility" value="0.4"/>
        <property name="dt" value="0.00005"/>
        <property name="prng" ref="prng"/>
    </bean>

    <bean id="noiseTraderValuationPolicy" scope="prototype"
          class="net.sourceforge.jasa.agent.valuation.ReturnForecastValuationPolicy">
        <property name="forecaster" ref="noiseTraderForecaster"/>
    </bean>

    <bean id="fundamentalistValuationPolicy" scope="prototype"
          class="net.sourceforge.jasa.agent.valuation.ReturnForecastValuationPolicy">
        <property name="forecaster" ref="fundamentalistForecaster"/>
    </bean>

    <bean id="chartistValuationPolicy" scope="prototype"
          class="net.sourceforge.jasa.agent.valuation.ReturnForecastValuationPolicy">
        <property name="forecaster" ref="chartistForecaster"/>
    </bean>

    <bean id="linearCombinationValuationPolicy" scope="prototype"
          class="net.sourceforge.jasa.agent.valuation.ReturnForecastValuationPolicy">
        <property name="forecaster" ref="linearCombinationForecaster"/>
    </bean>

    <bean id="linearCombinationForecaster" scope="prototype"
          class="net.sourceforge.jasa.agent.valuation.LinearWeightedReturnForecaster">

        <property name="timeHorizon" value="7"/>

        <property name="forecasters">
            <list>
                <ref bean="fundamentalistForecaster"/>
                <ref bean="chartistForecaster"/>
                <ref bean="noiseTraderForecaster"/>
            </list>
        </property>

        <property name="distributions">
            <list>
                <ref bean="fundamentalistWeightDistribution"/>
                <ref bean="chartistWeightDistribution"/>
                <ref bean="noiseTraderWeightDistribution"/>
            </list>
        </property>

        <property name="scaling" value="1.0"/>
    </bean>

    <bean id="fundamentalistWeightDistribution"
          class="net.sourceforge.jabm.util.AbsoluteContinuousDistribution"
          scope="prototype">
        <property name="underlyingDistribution">
            <bean class="net.sourceforge.jabm.distribution.NormalDistribution">
                <property name="mean" value="0.0"/>
                <property name="stdev" ref="weightStdevDistribution"/>
                <property name="prng" ref="prng"/>
            </bean>
        </property>
    </bean>

    <bean id="chartistWeightDistribution"
          class="net.sourceforge.jabm.util.AbsoluteContinuousDistribution"
          scope="prototype">
        <property name="underlyingDistribution" ref="chartistNormal"/>
    </bean>

    <bean id="chartistNormal" class="net.sourceforge.jabm.distribution.NormalDistribution"
          scope="prototype">
        <property name="mean" value="0.0" />
        <property name="stdev" ref="weightStdevDistribution" />
        <property name="prng" ref="prng" />
    </bean>

    <bean id="noiseTraderWeightDistribution"
          class="net.sourceforge.jabm.distribution.NormalDistribution"
          scope="prototype">
        <property name="mean" value="0.0"/>
        <property name="stdev" ref="weightStdevDistribution"/>
        <property name="prng" ref="prng"/>
    </bean>

    <bean id="weightStdevDistribution"
          class="net.sourceforge.jabm.spring.RandomDoubleFactoryBean">
        <property name="distribution">
            <bean class="net.sourceforge.jabm.distribution.UniformDistribution">
                <property name="min" value="0.1"/>
                <property name="max" value="0.3"/>
                <property name="prng" ref="prng"/>
            </bean>
        </property>
    </bean>

    <bean id="chartistWindowSizeDistribution"
          class="net.sourceforge.jabm.distribution.UniformDistribution"
          scope="prototype">
        <property name="min" value="200.0"/>
        <property name="max" value="2000.0"/>
        <property name="prng" ref="prng"/>
    </bean>

    <bean id="randomValuationPolicy"
          class="net.sourceforge.jasa.agent.valuation.RandomValuer">
        <constructor-arg value="10"/>
        <constructor-arg value="100"/>
        <constructor-arg ref="prng"/>
    </bean>


    <!-- Beans defining co-evolutionary learning   -->

    <bean id="evolvingPopulation" parent="staticPopulation"
          class="net.sourceforge.jabm.evolution.EvolvingPopulation"
          scope="simulation">
        <property name="prng" ref="prng"/>
        <property name="breeder" ref="uniformBreeder"/>
        <property name="breedingInterval" value="1"/>
    </bean>

    <bean id="uniformBreeder" class="net.sourceforge.jabm.evolution.CombiBreeder">
        <property name="breedingPipeline">
            <list>
                <ref bean="fitnessProportionateBreeder"/>
                <ref bean="mutationBreeder"/>
            </list>
        </property>
    </bean>

    <bean id="mutationBreeder"
          class="net.sourceforge.jabm.evolution.MutationBreeder">
        <property name="mutationProbability" value="0.005"/>
        <property name="prng" ref="prng"/>
        <property name="mutationOperator">
            <bean class="net.sourceforge.jasa.agent.valuation.evolution.WeightMutationOperator"/>
        </property>
    </bean>

    <bean id="fitnessProportionateBreeder"
          class="net.sourceforge.jabm.evolution.FitnessProportionateBreeder"
          scope="simulation">

        <property name="prng" ref="prng"/>

        <property name="fitnessFunction">
            <bean class="net.sourceforge.jasa.agent.valuation.evolution.ForecastErrorFitnessFunction"
                  scope="simulation"/>
        </property>

        <property name="imitationOperator">
            <bean class="net.sourceforge.jasa.agent.valuation.evolution.ValuationPolicyImitationOperator"/>
        </property>

        <property name="imitationProbability" value="0.2"/>

    </bean>


</beans>
